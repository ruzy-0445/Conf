# 資料傳輸與壓縮的相關設定
# 此設定應引入於 http 情境中

# 利用 sendfile(2) 系統呼叫將將兩檔案的資料複製直接在 kernel space 完成（相對於使用 read(2) 跟 write(2) 系統呼叫從 kernel space 讀取磁碟內容到 user space 再寫到 kernel space 的網路 socket 緩存），減少情境切換(context switching)的成本增加小靜態檔案的資料存取效能
# http://nginx.org/en/docs/http/ngx_http_core_module.html#sendfile
# https://stackoverflow.com/questions/2743698/differnce-between-linux-write-and-sendfile-syscall/2743756
# 預設值：off
sendfile on;

# 限制每次 sendfile(2) 系統呼叫傳輸的資料量，避免傳輸大檔案時卡住 Nginx 的事件處理隊列
# http://nginx.org/en/docs/http/ngx_http_core_module.html#sendfile_max_chunk
# https://stackoverflow.com/questions/38711282/nginx-slow-static-file-serving-slower-than-node
# 預設值：0（不限制）
sendfile_max_chunk 512k;

# 啟用非同步資料傳輸(asynchronous file I/O)的使用，避免大檔案的傳輸卡住 Nginx 的事件處理隊列
# 同時使用線程池來進行資料傳輸，避免獨占服務進程運行
# http://nginx.org/en/docs/http/ngx_http_core_module.html#aio
# 特別適用於服務的資料量遠大於系統磁碟快取大小的服務（如影音串流服務），非此情境則反而會造成些許效能損失
# "Offloading read operations to the thread pool is a technique applicable to very specific tasks. It is most useful where the volume of frequently requested content doesn’t fit into the operating system’s disk cache. This might be the case with, for instance, a heavily loaded NGINX‑based streaming media server."
# https://www.nginx.com/blog/thread-pools-boost-performance-9x/
# 預設值：off
#aio threads;

# 啟用在作為 HTTP 反向代理服務時使用非同步資料傳輸寫入從上游服務緝讀取到的內容的暫存檔，改善 HTTP 反向代理效能
# http://nginx.org/en/docs/http/ngx_http_core_module.html#aio_write
# 預設值：off（停用此功能）
#aio_write on;

# 小於指定的大小的檔案使用 sendfile(2) 系統呼叫傳輸
# 大於或等於指定的大小的檔案使用非同步資料傳輸
# http://nginx.org/en/docs/http/ngx_http_core_module.html#directio
# 預設值：off（所有檔案都會使用 sendfile(2) 傳輸，大檔案會卡住 Nginx 的事件處理隊列降低效能）
# 不會因網路頻寬造成傳輸延遲的檔案大小適合用 sendfile，其他的則適合用 AIO
#directio 4m;

# directio 的參數，官方文件建議非 XFS 檔案系統使用 512，XFS 檔案系統使用 4K
# http://nginx.org/en/docs/http/ngx_http_core_module.html#directio_alignment
# 預設值：512
#directio_alignment 512;
#directio_alignment 4K;
