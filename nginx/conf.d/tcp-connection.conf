# TCP 連線設定
# 此設定檔應引入於 http 情境中

# 啟用 TCP socket 的 TCP_NODELAY 選項，停用基於 Nagle 演算法的 TCP socket 緩存功能
# 不合併 TCP 封包而是第一時間將封包送出，適用於不能有延遲的網路應用（如遠端控制或實況服務），但是會降低 TCP 協議效能
# 通常情境啟用減少每連線最多 0.2 秒的回應延遲；沒有低延遲要求的大靜態檔案下載站台可停用
# http://nginx.org/en/docs/http/ngx_http_core_module.html#tcp_nodelay
# https://en.wikipedia.org/wiki/Nagle's_algorithm#Interactions_with_real-time_systems
# 預設值：on
tcp_nodelay on;

# 啟用 TCP socket 的 TCP_CORK 選項，以確保每個 TCP 封包在送出前都放滿資料，減少傳送總封包數降低傳送附加成本
# http://nginx.org/en/docs/http/ngx_http_core_module.html#tcp_nopush
# https://thoughts.t37.net/nginx-optimization-understanding-sendfile-tcp-nodelay-and-tcp-nopush-c55cdd276765
# 預設值：off
# 此選項需要啟用 sendfile 指令才有作用
tcp_nopush on;

# 設定服務端TCP連線保持的秒數，以及透過 Keep-Alive 回應標頭告訴客戶端的逾時秒數
# http://nginx.org/en/docs/http/ngx_http_core_module.html#keepalive_timeout
# 預設值：75s、不設定 Keep-Alive 標頭告訴客戶端連線保持時間（客戶端也有自己的逾時時間（參考值：2分鐘）超過了一樣會關閉連線）
# 取捨：TCP 建立連線的成本、服務器的可用 TCP 連線數量
# 附註：Keep-alive 連線數量不會造成服務進程連線數用盡，當此情境發生 Nginx 會中止既有的 Keep-alive 連線
# https://serverfault.com/questions/583609/should-keepalive-timeout-be-removed-from-nginx-config
# 如果服務器會長期收到同一客戶端的請求的話可以拉長逾時時間減少重新建立TCP連線的成本
# 如果服務器會收到大量不同客戶端的請求的話可以縮短逾時時間避免可用 TCP 連線數用盡造成服務阻斷
keepalive_timeout 120s;
